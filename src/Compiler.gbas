// --------------------------------- //
// Project: 123basic
// Start: Monday, July 18, 2011
// IDE Version: 9.040

TYPE TCompiler
	Code$
	Tokens[] AS TToken
	//currentToken AS TToken
	currentPosi%

	GlobalFuncs AS HashMap //Die Globalen Funktionen, also jene die jederzeit aufgerufen werden können (KEINE Methods)
	Funcs[] AS TIdentifierFunc //Die Funktionen
	Globals%[] // Alle Globals - zielposition ist das Varisarray
	Types[] AS TIdentifierType //Alle Types
	Varis[] AS TIdentifierVari //Alle Variablen
	protoCheckers[] AS TProtoChecker //Die Prototype datatype checker
	DataBlocks[] AS TDataBlock //Die Datenblöcke

	MainScope%
	CurrentScope% = -1
	ImportantScope% = -1
	currentFunc% = -1 //Aktuelle Funktion, welche geparst wird.
	currentForEach$ //Aktuelle ForEach Variable$
	inLoop% //Befindet sich der compiler gerade in einer Schleife?

	LastMaxTokens%
	WasError% = FALSE //Gab es einen Fehler?
	HasGoto% = FALSE //Gibt es im Code GOTO?

	errorState$ = ""

//	Blacklists$[] //was soll nicht eingebunden werden?
//	BlacklistAll%

	Exports[] AS TExport
	LastTokenID% = 0

	?IFDEF FOR_IDE
	GetIdent% = FALSE
	?ENDIF

	HeaderFiles$[]
	HeaderText$
ENDTYPE

GLOBAL LastExprID = 0
GLOBAL Exprs[] AS TExpr

CONSTANT FUNC_IS_FUNC 	= 1
CONSTANT FUNC_IS_SUB 	= 2
CONSTANT FUNC_IS_METHOD	= 3
CONSTANT FUNC_IS_PROTO	= 4

TYPE TIdentifierFunc
	OName$ // Der alte Name vor Name mangling
	Name$
	Params%[] //Parameter, Varisarray
	CopyParams%[] //hier sind die Kopien von den parametern (ist um die ref veränderungen nicht nach außen hin weiterzugeben)
	Statics%[] //Alle statischen Variablen

	datatype AS TDatatype
	Native%
	Scp% = -1//der Scope (ist eine Expression)
	ID% //Die Position im FuncArray
	Typ%//Was ist es? (Siehe FUNC_IS konstanten)
	Tok% //Der Starttoken
	PlzCompile% //Es soll bitte kompiliert werden wenn das Hauptfile fertig kompiliert wurde.
	HasRef% = FALSE //Hat es BYREF Variablen?

	DefTok% // Token of the func declaration

	UsedAsPrototype% = FALSE // Wurde die FUnktion als Prototype verwendet? Dazu da: unref() in JS minimieren

	//FUNC_IS_METHOD
	MyType% = -1//Welchem Type gehört diese Funktion (falls es eine Methode ist)
	SelfVar% = -1
	IsAbstract% //Ist die Methode abstrakt?

	//FUNC_IS_FUNC
	IsCallback% = FALSE //Ist es eine Callbackfunktion?
ENDTYPE

CONSTANT VARI_IS_LOCAL	= 1
CONSTANT VARI_IS_GLOBAL	= 2
CONSTANT VARI_IS_ATTR	= 3
CONSTANT VARI_IS_STATIC	= 4
CONSTANT VARI_IS_PARAM	= 5
CONSTANT VARI_IS_CONST	= 6
CONSTANT VARI_IS_ALIAS	= 7

TYPE TIdentifierVari
	Name$
	datatype AS TDatatype
	Typ%
	ID%
	PreDef% = -1 //Der default Wert.
	ref% = FALSE //Ist es by ref?
	OwnerVari% = -1 //wenns eine ausweichvariable ist, dann muss die gekennzeichnet werden

	?IFDEF VMCOMPILER
	typeId% = -1 // which IdentifierType is this variable?
	attrPos% = -1 // which attribute position in the instance does this vari belong to?
	Value AS TStackEntry // The value of this variable in the VM
	?ENDIF

	//VARI_IS_STATIC
	func% // Zu welcher funktion gehört die Variable

ENDTYPE

TYPE TIdentifierType
	OName$
	Name$
	RealName$
	Attributes%[]
	Methods%[] //funcarray in compiler
	PreSize%[] //die vordefinierte größe
	ID%

	Extending% = -1 //Extended dieser Type etwas?

	Createable% = TRUE

	IsNative% = FALSE
ENDTYPE
GLOBAL LastType AS TIdentifierType

TYPE TDatatype
	Name$
	IsArray%
ENDTYPE
GLOBAL voidDatatype AS TDatatype
GLOBAL intDatatype AS TDatatype
GLOBAL floatDatatype AS TDatatype
GLOBAL strDatatype AS TDatatype

//EIn DATA Block (ist keine Expression, weil nicht notwendig
TYPE TDataBlock
	Name$
	Datas%[] //Expressions
ENDTYPE

//Ist fürs überprüfen der PROTOTYPEs zuständig.
//kann nicht früher gemacht werden, wegen folgendem:
//GLOBAL ptr AS funcPtr = Func1 //hier ist noch nicht klar, welche Parameter Func1 hat.
//FUNCTION Func1: ; ENDFUNCTION
//PROTOTYPE funcPtr: ; ENDFUNCTION
TYPE TProtoChecker
	Tok AS TToken
	fromFunc%; toFunc%
ENDTYPE


TYPE TToken
	Line%; LineContent$
	Character%; Path$
	Text$
	IsDel% = FALSE //Ist es vom Präprozessor gelöscht?
	//ID%
ENDTYPE

TYPE TExport
	Name$; RealName$
ENDTYPE

CONSTANT SCOPE_IS_IF	= 1
CONSTANT SCOPE_IS_FUNC	= 2
CONSTANT SCOPE_IS_LOOP	= 3
CONSTANT SCOPE_IS_MAIN	= 4
CONSTANT SCOPE_IS_TRY	= 5
CONSTANT SCOPE_IS_SELECT= 6

CONSTANT EXPR_VERSION = 1



TYPE TExpr
	datatype AS TDatatype //Datentyp
	Typ% //Die Kennzeichnung (siehe EXPR_IS Konstanten)
	ID% //Die Position im Exprs[] Array
	tokID% //token

	//operator
	Left%; Right%
	Op%

	//Scope
	Exprs%[]
	Varis%[]
	SuperScope% = -1 //Der darüberliegende Scope :OOO
	ScpTyp% //Siehe SCOPE_IS Konstanten
	Labels%[] //Die Labels zu denen gesprungen werden kann!
	Gotos%[] //Die Gotos von denen gesprungen wird!!!111

	//int
	intval%

	//float
	floatval

	//string
	strval$

	//funccall
	func%
	Params%[]
	wasAdded% = FALSE //wurden die default parameter schon hinzugefügt?

	//variable
	vari%

	//assign
	//vari%-->siehe variable, Right% --> Siehe Operator

	//dim/redim
	array%
	dims%[]

	//array
	//vari-->siehe variable
	//dims->siehe dim

	//cast2int/float/string
	expr% //was soll gecastet werden????

	//access
	//expr-->siehe cast2
	nextExpr%

	//return
	//expr--> siehe cast2

	//Label expression
	Name$

	//goto
	//Name$--> siehe Label
	//Scp--> siehe while

	//if/iif
	Conditions%[]
	Scopes%[]
	elseScope% = -1
	dummy = -42 //damit man schnell nach dem else scope jumpen kann

	//while
	//expr siehe cast2
	Scp%
	//dummy

	//repeat
	//expr siehe cast2
	//scp siehe while

	//for
	//Scp siehe while
	varExpr%; toExpr%; stepExpr%; hasTo%

	//foreach
	// varExpr
	// Scp
	inExpr%

	//try
	//Scp
	//vari
	catchScp%


	//select --> alle siehe if

	//Restore
	//name$ --> siehe label

	//read
	Reads%[]

	//alias
	//vari
	//expr

	//inc/dec
	//expr, vari

	//dimpush
	//expr, vari

	//len
	//expr
	kern% = -1

	//dimdata
	//array, Exprs[]

	//delete
	// nichts \o/

	//dimdel
	//array,
	position%

	//bounds
	//array%
	//position

	//Not
	//expr

	//addressof
	//func

	//assert/debug
	//expr

	//require
	//siehe Name$ -> Path
	Content$


	//cast2obj
	//expr
ENDTYPE



CONSTANT OP_IS_UNAER 	= 1
CONSTANT OP_IS_BINAER 	= 2
CONSTANT OP_IS_BOOL 	= 3
TYPE TOperator
	Name$
	Sym$
	Typ%
	Prio% //je groesser, desto stärker
	ID%
ENDTYPE
GLOBAL Operators[] AS TOperator
//GLOBAL Keywords$[]
GLOBAL KeywordMap AS HashMap
GLOBAL Compiler AS TCompiler


TYPE TDefine
	Key$
	Value$
ENDTYPE
GLOBAL Defines[] AS TDefine
GLOBAL LastDefine AS TDefine


PROTOTYPE Lang_Generator$:

TYPE TGenerator
	Name$
	genProto AS Lang_Generator$
ENDTYPE

GLOBAL Generators[] AS TGenerator


GLOBAL SettingIn$ = ""


FUNCTION LoadFile$: Path$
	?IFDEF DEBUG
	STDOUT "Load file: "+Path$+"\n"
	?ENDIF

	LOCAL Text$
	LOCAL File% = GENFILE()
	IF OPENFILE(File,Path$,1)
		WHILE ENDOFFILE(File)=FALSE
			LOCAL Line$
			READLINE File,Line$
			Text$=Text$+Line$+"\n"
		WEND
		CLOSEFILE File
	ELSE
		Error("Cannot find file: " + Path$, CODELINE(), CODEFILE$())
	ENDIF

	RETURN Text$
ENDFUNCTION

FUNCTION Error: Msg$, Line%=42,File$="Unknown"
	LOCAL tok AS TToken
	tok = GetCurrentToken()

	Msg$ = "Error: '"+REPLACE$(Msg$,"\n","NEWLINE")+Compiler.errorState$+"'\n"
	Msg$ = Msg$ + "in line '" + tok.Line +"' at character '" + tok.Character + "' near '"+REPLACE$(tok.Text$,"\n","NEWLINE")+"'\n"
	Msg$ = Msg$ + "in file '"+tok.Path$+"'\n"
	?IFDEF DEBUG
	LOCAL func$ = "main func"
	IF Compiler.currentFunc <> -1 THEN func$ = Compiler.Funcs[Compiler.currentFunc].Name$
	Msg$ = Msg$ + "Debug info: Error appeared in line '"+Line+"' in file '"+File$+"' \n"//while parsing function "+func$+"\n"
	?ENDIF
	Msg$ = Msg$ + "\t '"+tok.LineContent$+"'\n"
	Msg$ = Msg$ + "-----------------------------------\n"
	Msg$ = "\n-----------------------------------\n" + Msg$;
	STDERR Msg$
	Compiler.WasError = TRUE
	?IFNDEF HTML5
	KEYWAIT
	?ELSE
	END //IN HTML5 aufhören, gibt kein KEYWAIT
	?ENDIF
	THROW "syntaxerror '"+Msg$+"'"
ENDFUNCTION

FUNCTION Warning: Msg$
	LOCAL tok AS TToken
	tok = GetCurrentToken()

	Msg$ = "Warning: '"+REPLACE$(Msg$,"\n","NEWLINE")+"'\n"
	Msg$ = Msg$ + "in line '" + tok.Line +"' at character '" + tok.Character+"' near '"+REPLACE$(tok.Text$,"\n","NEWLINE")+"'\n"
	Msg$ = Msg$ + "in file '"+tok.Path$+"'\n"
	Msg$ = Msg$ + "\t '"+tok.LineContent$+"'\n"
	Msg$ = Msg$ + "-----------------------------------\n"
	Msg$ = "\n-----------------------------------\n" + Msg$;
	STDOUT Msg$
ENDFUNCTION

GLOBAL SHLASHF$


FUNCTION CreateToken AS TToken: Text$, LineContent$, Line%, Character%, Path$
	IF Text$<>"\n" AND TRIM$(Text$)="" OR Text$="\t" OR Text$ = "\r"
	ELSE
		LOCAL ascval% = ASC(Text$)
		IF (ascval = 8 OR ascval = 12 OR ascval = SHLASHF$)
			Text$ = "\n"
		ENDIF
		?IFDEF DEBUGLEXER
		STDOUT "Create Token "+REPLACE$(Text$,"\n", "NEWLINE")+" IN line "+Line+" IN Content "+LineContent$+"\n"
		?ENDIF
		LOCAL pos = Compiler.LastTokenID
		Compiler.LastTokenID = Compiler.LastTokenID + 1
		IF Compiler.LastTokenID >= LEN(Compiler.Tokens[])-10
			?IFNDEF OTTBASIC
			REDIM Compiler.Tokens[Compiler.LastTokenID + 10000]
			?ELSE
			REDIM Compiler.Tokens[Compiler.LastTokenID + 50]
			?ENDIF
		ENDIF

		Compiler.Tokens[pos].Line = Line
		Compiler.Tokens[pos].Character = Character
		Compiler.Tokens[pos].LineContent$ = LineContent$
		Compiler.Tokens[pos].Path$ = Path$
		Compiler.Tokens[pos].Text$ = Text$
		IF LEFT$(Compiler.Tokens[pos].Text$, 1) = "@" THEN Compiler.Tokens[pos].Text$ = MID$(Compiler.Tokens[pos].Text$, 1)
	ENDIF
ENDFUNCTION

FUNCTION GetCurrentToken AS TToken:
	IF Compiler.currentPosi < Compiler.LastTokenID
		RETURN Compiler.Tokens[Compiler.currentPosi]
	ELSE
		LOCAL t AS TToken
		RETURN t
	ENDIF
ENDFUNCTION

FUNCTION Start:
	Compiler.currentPosi = 0
	GetNext()
ENDFUNCTION

FUNCTION HasNext%:
	IF Compiler.currentPosi > Compiler.LastTokenID-2
		RETURN FALSE
	ELSE
		RETURN TRUE
	ENDIF
ENDFUNCTION
FUNCTION GetNext:
	REPEAT
		INC Compiler.currentPosi
		IF Compiler.currentPosi > Compiler.LastTokenID-1
			Error("Unexpected end of line",CODELINE(), CODEFILE$())
		ENDIF
	UNTIL NOT Compiler.Tokens[Compiler.currentPosi].IsDel
	?IFDEF DEBUG
	STDOUT "GETNEXT Token: "+REPLACE$(GetCurrent$(),"\n","NEWLINE")+"\n"
	?ENDIF
ENDFUNCTION
FUNCTION Match: Text$, Line, File$
	IF Compiler.Tokens[Compiler.currentPosi].Text$ <> Text$
		Error("Unexpected token, expecting: '"+Text$+"'", Line, File$)
	ENDIF
	GetNext()
ENDFUNCTION

FUNCTION EOFParse%:
	RETURN Compiler.currentPosi < Compiler.LastTokenID-1
ENDFUNCTION

FUNCTION GetCurrent$:
	RETURN Compiler.Tokens[Compiler.currentPosi].Text$
ENDFUNCTION

FUNCTION RemoveCurrent:
	Compiler.Tokens[Compiler.currentPosi].IsDel = TRUE
	INC Compiler.currentPosi
	//DIMDEL Compiler.Tokens[], Compiler.currentPosi
	//DEC Compiler.LastTokenID
ENDFUNCTION

FUNCTION MatchAndRemove: Text$, Line, File$
	IF GetCurrent$() <> Text$
		Error("Unexpected token, expecting: '"+Text$+"'", Line, File$)
	ENDIF
	RemoveCurrent()
ENDFUNCTION

FUNCTION CreateDatatype AS TDatatype : Name$, IsArray% = 0
	LOCAL d AS TDatatype
	d.Name$ = Name$
	d.IsArray = IsArray
	RETURN d
ENDFUNCTION

FUNCTION IsToken%: Text$
	IF GetCurrent$() = Text$
		RETURN TRUE
	ELSE
		RETURN FALSE
	ENDIF
ENDFUNCTION

FUNCTION CreateOperator: Name$, Sym$, Prio%, Typ%
	LOCAL Op AS TOperator
	Op.Name$ = Name$
	Op.Sym$ = Sym$
	Op.Prio = Prio
	Op.Typ = Typ
	Op.ID = LEN(Operators[])
	DIMPUSH Operators[], Op
ENDFUNCTION

FUNCTION WriteString: F%, Text$
	WRITEULONG F, Text$
	WRITESTR F, Text$
ENDFUNCTION

FUNCTION ReadString: F%, BYREF Text$
	LOCAL l%
	READULONG F, l
	READSTR F, Text$, l
ENDFUNCTION

FUNCTION AddVariable: Vari AS TIdentifierVari, Ignore%
	IF Ignore = FALSE AND IsVarExisting(Vari.Name$) THEN Error("Variable already exists, is a keyword or a type: '"+Vari.Name$+"'", CODELINE(), CODEFILE$())
	Vari.ID = LEN(Compiler.Varis[])

	DIMPUSH Compiler.Varis[], Vari
ENDFUNCTION

FUNCTION AddFunction: Func AS TIdentifierFunc
	IF Func.Typ <> FUNC_IS_METHOD AND IsFuncExisting(Func.Name$, Func.IsCallback) THEN Error("Function already exists, is a keyword or a type: '"+Func.Name$+"'", CODELINE(), CODEFILE$())

	Func.ID = LEN(Compiler.Funcs[])
	DIMPUSH Compiler.Funcs[], Func
ENDFUNCTION

FUNCTION InitCompiler:
	REDIM Defines[0]
	voidDatatype = CreateDatatype("void")
	intDatatype = CreateDatatype("int")
	floatDatatype = CreateDatatype("float")
	strDatatype = CreateDatatype("string")

	SHLASHF$ = CHR$("\f")

	REDIM Operators[0]
	CreateOperator("add"	,"+"	,4,OP_IS_BINAER)
	CreateOperator("sub"	,"-"	,4,OP_IS_BINAER)
	CreateOperator("mul"	,"*"	,5,OP_IS_BINAER)
	CreateOperator("div"	,"/"	,5,OP_IS_BINAER)
	CreateOperator("pot"	,"^"	,6,OP_IS_BINAER)

	CreateOperator("equ"	,"="	,3,OP_IS_BOOL)
	CreateOperator("grt"	,">"	,3,OP_IS_BOOL)
	CreateOperator("less"	,"<"	,3,OP_IS_BOOL)
	CreateOperator("lessequ","<="	,3,OP_IS_BOOL)
	CreateOperator("grtequ"	,">="	,3,OP_IS_BOOL)
	CreateOperator("unequ"	,"<>"	,3,OP_IS_BOOL)

	CreateOperator("and"	,"AND"	,2,OP_IS_BOOL)
	CreateOperator("or"		,"OR"	,2,OP_IS_BOOL)

	LOCAL Keywords$[]
	DIMDATA Keywords$[], "CALLBACK","FUNCTION","ENDFUNCTION","SUB","ENDSUB","GOSUB","IF","ELSE","ELSEIF","THEN","ENDIF","WHILE","WEND","BREAK","CONTINUE","FOR", "FOREACH", "IN", "TO","STEP","NEXT","REPEAT","UNTIL","TYPE","ENDTYPE","RETURN", "NATIVE", "LOCAL", "GLOBAL", "STATIC", "DIM", "REDIM", "INLINE", "ENDINLINE", "PROTOTYPE", "REQUIRE", "BREAK", "CONTINUE", "TRY", "CATCH", "FINALLY", "THROW", "SELECT", "CASE", "DEFAULT", "ENDSELECT", "STARTDATA", "ENDDATA", "DATA", "RESTORE", "READ", "GOTO", "ALIAS", "AS", "CONSTANT", "INC", "DEC", "DIMPUSH", "LEN", "DIMDATA", "DELETE", "DIMDEL", "DEBUG", "ASSERT", "ABSTRACT", "EXPORT"
	//Nun mache aus den Keywords$[] eine Map
	KeywordMap.SetSize(LEN(Keywords$[])*8) //richtige größe für eine hashmap
	FOREACH key$ IN Keywords$[]
		KeywordMap.Put(key$, TRUE)
	NEXT


	RegisterDefine("GLB_VERSION", VERSION$)
	RegisterDefine("oTT_VERSION", VERSION$)
	RegisterDefine("OTTBASIC", TRUE)


	//ADDONs
	RegisterDefine("ADDON_2D", TRUE)
	RegisterDefine("ADDON_3D", TRUE)
	RegisterDefine("ADDON_NET", TRUE)
	RegisterDefine("ADDON_INPUT", TRUE)
	RegisterDefine("ADDON_CONSOLE", TRUE)
	RegisterDefine("ADDON_SOUND", TRUE)
	RegisterDefine("ADDON_NET", TRUE)

	ResetExpressions()

	// Documentation
	REDIM Documentations[0]
ENDFUNCTION


?IFDEF OTTBASIC
GLOBAL MaxPasses% = 6
EXPORT MaxPasses
NATIVE FUNCTION PassSuccessfull: CurrentPass%, MaxPass%
?ELSE
FUNCTION PassSuccessfull: CurrentPass%, MaxPass%
ENDFUNCTION
?ENDIF

FUNCTION Compile$: Text$, Target$
	CONSTANT MAX_PASS = 6
	LOCAL c AS TCompiler
	Compiler = c //Neuen Compiler erstellen!


	InitCompiler()

	ResetExpressions()

	PushTimer()

	SetupTarget(Target$)

	?IFNDEF FOR_IDE
	FOREACH HeaderFile$ IN Compiler.HeaderFiles$[]
		Compiler.HeaderText$ = Compiler.HeaderText$ + "// HEADER " + HeaderFile$ + "\n"
		Compiler.HeaderText$ = Compiler.HeaderText$ + LoadFile$("Target/Header/" + HeaderFile$)
		Compiler.HeaderText$ = Compiler.HeaderText$ + "\n"
	NEXT

	Text$ = Text$ + Compiler.HeaderText$
	?ENDIF

	PassSuccessfull(1, MAX_PASS)

	PopTimer("Header load & setup target!")

	Compiler.Code$ = Text$ + "\n"

	PushTimer()
	Lexer()
	PopTimer("Lexer!")

	PassSuccessfull(2, MAX_PASS)
	STDOUT "Lexing successful! \n"

	Compiler.errorState$ = " (precompiler error)"
	PushTimer()
	Precompiler()

	PopTimer("Precompiler")

	PassSuccessfull(3, MAX_PASS)
	STDOUT "Preprocessing successful! \n"


	Compiler.LastMaxTokens = Compiler.LastTokenID

	ResetExpressions()

	Compiler.errorState$ = " (analyse error)"
	PushTimer()
	Analyser()
	PopTimer("Analyser")

	PassSuccessfull(4, MAX_PASS)
	IF Compiler.WasError
		STDOUT "Analysing failed :( \n"
		RETURN
	ELSE
		STDOUT "Analysing successful! \n"
	ENDIF

	?IFNDEF OTTBASIC
	LOCAL tmpPath$ = GETCURRENTDIR$()
	SETCURRENTDIR(GbapPath$)
	?ENDIF
	
	Compiler.errorState$ = " (parse error)"
	PushTimer()
	Parser()
	PopTimer("Parser")

	PassSuccessfull(5, MAX_PASS)
	IF Compiler.WasError
		STDOUT "Parsing failed :( \n"
		RETURN
	ELSE
		STDOUT "Parsing successful! \n"
	ENDIF

	?IFDEF GEN_DOC
	Compiler.errorState$ = " (doc generation error)"
	PushTimer()
	GenerateDoc()
	PopTimer("Generate Doc")
	
	IF Compiler.WasError
		STDOUT "Doc Generation failed :( \n"
		RETURN
	ELSE
		STDOUT "Doc Generation successful! \n"
	ENDIF
	?ENDIF

	Compiler.errorState$ = " (generate error)"
	
	?IFNDEF OTTBASIC
	SETCURRENTDIR(tmpPath$)
	?ENDIF


	PushTimer()
	LOCAL Output$ = DoTarget$(Target$)
	PopTimer("Target stuff")

	PassSuccessfull(6, MAX_PASS)
	IF Compiler.WasError
		STDOUT "Generating failed :( \n"
		RETURN
	ELSE
		STDOUT "Generating successful to target "+Target$+"! \n"
	ENDIF

	RETURN Output$
ENDFUNCTION

FUNCTION ResetExpressions:
	DIM Exprs[0] //Expressions weg!
	LastExprID = 0
	CreateDebugExpression() //zum debuggen \o/
ENDFUNCTION


?IFDEF MEASURETIME
GLOBAL TimeStack%[]
?ENDIF
FUNCTION PushTimer%:
	?IFDEF MEASURETIME
	DIMPUSH TimeStack[], GETTIMERALL()
	?ENDIF
ENDFUNCTION

FUNCTION PopTimer: Text$
	?IFDEF MEASURETIME
	LOCAL n = FORMAT$(6, 16,(GETTIMERALL() - TimeStack[-1])/1000)
	STDOUT "\t\tTimer: "+Text$+": '"+n+"'\n"
	DIMDEL TimeStack[], -1
	?ENDIF
ENDFUNCTION


FUNCTION RegisterDefine: Key$, Value$
	LOCAL Def AS TDefine
	Def.Key$ = Key$
	Def.Value$ = Value$
	DIMPUSH Defines[], Def
ENDFUNCTION



