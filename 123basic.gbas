// -------------------------4-------- //
// Project: 123basic
// Start: Monday, July 18, 2011
// IDE Version: 9.040

// ?DEFINE DEBUGLEXER
// ?DEFINE DEBUG
// ?DEFINE MEASURETIME
// ?DEFINE TEST_BEFORE

?DEFINE GEN_DOC


?IF DEFINED(OTTBASIC)
	?DEFINE FOR_IDE //Kompiliere für die IDE
?ENDIF


CONSTANT VERSION$ 	= "1"
CONSTANT XMLNAME$ 	= "WIN32"


?IFNDEF HTML5
	//Es ist natives GLBasic oder C#
	?DEFINE CSCOMPILER
	?DEFINE JSCOMPILER
	?DEFINE VMCOMPILER
?ELSE
	?DEFINE JSCOMPILER
?ENDIF


LOCAL G AS TGenerator
DIM Generators[0]

?IFDEF JSCOMPILER
	G.Name$ = "JS"
	G.genProto = JS_Generator$
	DIMPUSH Generators[], G
?ENDIF

?IFDEF CSCOMPILER
	G.Name$ = "CS"
	G.genProto = CS_Generator$
	DIMPUSH Generators[], G
?ENDIF

?IFDEF VMCOMPILER
	G.Name$ = "VM"
	G.genProto = VM_Generator$
	DIMPUSH Generators[], G
?ENDIF

?IFDEF FOR_IDE
	?DEFINE HTML5_WEBWORKER
?ENDIF


?OPTIMIZE NONE


GbapPath$ = "./"

?IFNDEF HTML5
	InitCompiler()

	?IFDEF TEST_BEFORE
		PushTimer()
		RunTests()
		PopTimer("Tests")
	?ENDIF

	LOCAL ProjPath$	 = ""
	LOCAL ProjName$	 = ""
	LOCAL Target$	 = ""
	LOCAL Input$	 = ""

	LOCAL c$ = GETCOMMANDLINE$()

	IF INSTR(c$, "-N") <> -1
		LOCAL StartPos% = INSTR(c$, "-N")+3
		LOCAL EndPos% = INSTR(c$, "\"", StartPos)
		ProjName$ = MID$(c$, StartPos, EndPos - StartPos)
	ELSE
		ArgumentError("Missing option '-N'")
	ENDIF

	IF INSTR(c$, "-P") <> -1
		LOCAL StartPos% = INSTR(c$, "-P")+3
		LOCAL EndPos% = INSTR(c$, "\"", StartPos)
		ProjPath$ = MID$(c$, StartPos, EndPos - StartPos)
	ELSE
		ArgumentError("Missing option '-P'")
	ENDIF

	// No Run?
	IF INSTR(c$, "-NR") <> -1
		LOCAL StartPos% = INSTR(c$, "-NR")+3
		LOCAL EndPos% = StartPos+1
		NoRun = MID$(c$, StartPos, EndPos - StartPos)
	ENDIF

	IF INSTR(c$, "-G") <> -1
		LOCAL StartPos% = INSTR(c$, "-G")+2
		LOCAL EndPos% = INSTR(c$, "\"", StartPos)
		Target$ = MID$(c$, StartPos, EndPos - StartPos)
	ELSE
		ArgumentError("Missing option -G")
	ENDIF

	IF INSTR(c$,"-SAVEHEADER") <> -1
		SaveHeader = TRUE
	ENDIF

	PushTimer()
	Input$ = ReadGBAP$(ProjPath$, ProjName$)
	PopTimer("Read GBAP")

	?IFDEF DEBUG
		STDOUT "Compile:\n"+Input$+"\n"
	?ENDIF


	LOCAL Time% = GETTIMERALL()

	LOCAL output$ = Compile$(Input$, Target$)


	IF output$ = ""
		STDOUT "\n\nCompiling failed :(\n"

		KEYWAIT
	ELSE
		STDOUT "\n\nFunctions: "+LEN(Compiler.Funcs[])+" Variables: "+LEN(Compiler.Varis[])+" AST Nodes: "+LastExprID+" Types: "+LEN(Compiler.Types[])+"\n"
		STDOUT "Successful compile! Duration: "+(GETTIMERALL()-Time)/1000+" S, time per token: "+(GETTIMERALL()-Time)/Compiler.LastMaxTokens+"MS, tokens: "+Compiler.LastMaxTokens+" \n"

		IF SaveHeader
			STDOUT "Save header to " + GETCURRENTDIR$() + "\n"
			COPYFILE "Tmp/Header.js", "Header.js"
			COPYFILE "Tmp/OTTHeader.gbas", "OTTHeader.gbas"
		ENDIF

		?IFDEF VMCOMPILER
			IF Target$ = "VM"
				InitFuncs()


				LOCAL e AS Executor
				e.Init()
				e.Execute()
				KEYWAIT
			ENDIF
		?ENDIF

		?IFNDEF HTML5
			?IFDEF MEASURETIME
				KEYWAIT
			?ENDIF
		?ENDIF
	ENDIF
?ELSE
	CONSOLE = FALSE

	?IFDEF FOR_IDE
		EXPORT Compile$
		EXPORT InitCompiler
		EXPORT RegisterDefine
		EXPORT GetIdentifierList
		EXPORT ParseIdentifiers
		EXPORT GetErrors
		
		FUNCTION GetErrors[] AS TError:
			RETURN Compiler.Errors
		ENDFUNCTION
	
		FUNCTION ParseIdentifiers[] AS TIDEIdentifier: Parse%, GenDoc%
			LOCAL c AS TCompiler
			Compiler = c //Neuen Compiler erstellen!
			Compiler.FaultTolerant = TRUE
			InitCompiler()
			ResetExpressions()
			Lexer()
			Precompiler()
			ResetExpressions()
			Analyser()
			IF Parse THEN Parser()
			
			?IFDEF GEN_DOC
			IF GenDoc THEN GenerateDoc()
			?ENDIF
			
			RETURN GetIdentifierList()
		ENDFUNCTION
		
		FUNCTION GetIdentifierList[] AS TIDEIdentifier:
			LOCAL Identifiers[] AS TIDEIdentifier
			
			FOREACH Func IN Compiler.Funcs[]
				LOCAL ident AS TIDEIdentifier
				ident.Name$ = Func.OName$
				ident.datatype = Func.datatype
				ident.Native% = Func.Native%
				ident.Typ$ = "function"
				ident.SubTyp = Func.Typ
				ident.token = Compiler.Tokens[Func.Tok]
				DIMPUSH Identifiers[], ident
			NEXT
			
			FOREACH Vari IN Compiler.Varis[]
				LOCAL ident AS TIDEIdentifier
				ident.Name$ = Vari.OName$
				ident.datatype = Vari.datatype
				ident.Typ$ = "variable"
				ident.SubTyp = Vari.Typ
				ident.token = Compiler.Tokens[Vari.Tok]
				DIMPUSH Identifiers[], ident
			NEXT
			
			FOREACH typ IN Compiler.Types[]
				LOCAL ident AS TIDEIdentifier
				ident.Name$ = typ.OName$
				ident.Typ$ = "type"
				ident.SubTyp = 0 // Type
				ident.token = Compiler.Tokens[typ.Tok]
				DIMPUSH Identifiers[], ident
			NEXT
			
			FOREACH kw$ IN Keywords$[]
				LOCAL ident AS TIDEIdentifier
				ident.Name$ = kw$
				ident.Typ$ = "keyword"
				ident.SubTyp = 0
				DIMPUSH Identifiers[], ident
			NEXT
			
			
			// add primitive data types
			LOCAL ident AS TIDEIdentifier
			ident.Name$ = "int"
			ident.Typ$ = "type"
			ident.SubTyp = 1 // primitive type
			DIMPUSH Identifiers[], ident
			
			ident.Name$ = "string"
			ident.Typ$ = "type"
			ident.SubTyp = 1
			DIMPUSH Identifiers[], ident
			
			ident.Name$ = "float"
			ident.Typ$ = "type"
			ident.SubTyp = 1
			DIMPUSH Identifiers[], ident
			
			ident.Name$ = "void"
			ident.Typ$ = "type"
			ident.SubTyp = 1
			DIMPUSH Identifiers[], ident
			
			RETURN Identifiers
		ENDFUNCTION
		
		TYPE TIDEIdentifier
			Name$
			datatype AS TDatatype
			token AS TToken
			Typ$
			SubTyp%
			
			// FUnc:
			Native%
		ENDTYPE
	?ENDIF
?ENDIF

FUNCTION ArgumentError: Err$
	STDOUT "Argument error: '"+Err$+"'"
	?IFNDEF HTML5
	KEYWAIT
	?ENDIF
	END
ENDFUNCTION

